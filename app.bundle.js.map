{"version":3,"file":"app.bundle.js","mappings":"mBAAO,MAAMA,EACX,WAAAC,CAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,OAASA,CAChB,CACAE,YAAc,EAEd,GAAAC,GACEF,KAAKC,aACP,CAEA,MAAAE,GACE,OAAIH,KAAKC,aAAeD,KAAKD,MAK/B,ECdF,MAAMK,EAAQ,ICHP,MAEL,WAAAC,GACE,MAAMC,EAAO,IAAIC,IACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAc,GAAGF,KAAKC,IAE5BH,EAAKK,IAAID,EAAa,KACxB,CAGF,OAAOJ,CACT,CAEAM,UAAYZ,KAAKK,cAEjB,SAAAQ,EAAWC,EAAGC,IACZ,OAAID,GAAK,GAAKA,GAAK,GAAKC,GAAK,GAAKA,GAAK,CAKzC,CAEA,kBAAAC,CAAmBC,GACjB,OAAOA,EAAIC,OAAOC,IAChB,MAAOL,EAAGC,GAAKI,EACf,OAAOnB,KAAKa,UAAU,CAACC,EAAGC,GAAG,GAEjC,CAGA,gBAAAK,CAAiBH,GACf,OAAOA,EAAIC,OAAOC,IACRnB,KAAKY,UAAUS,IAAIF,IAE/B,CAEA,SAAAG,CAAUC,GAAWT,EAAGC,GAAIhB,EAAQyB,GAClC,IAAIC,EAASX,EACTY,EAASX,EACb,GAAIf,KAAKa,UAAU,CAACC,EAAGC,IAAK,CAC1B,MAAMY,EAAe,GACrB,IAAIC,EACAlB,EACJ,IAAK,IAAIF,EAAI,EAAGA,EAAIT,EAAQS,IACR,eAAdgB,GACFd,EAAc,GAAGI,KAAKY,IACtBA,KACuB,aAAdF,IACTd,EAAc,GAAGe,KAAUV,IAC3BU,KAEFE,EAAaE,KAAKnB,GAClBkB,EAAwBD,EAAaG,KAAKX,GACjCA,EAAMY,MAAM,KAAKD,IAAIE,UAGhC,MAAMC,EAAmBjC,KAAKgB,mBAAmBY,GAC3CM,EAAiBlC,KAAKoB,iBAAiBO,GACzCM,GAAoBC,GACtBP,EAAaQ,SAAShB,IACpBnB,KAAKY,UAAUD,IAAIQ,EAAO,CAACI,GAAU,GAqC3C,CACF,CAGA,aAAAa,EAAetB,EAAGC,IAChB,MAAML,EAAc,GAAGI,KAAKC,IAC5B,IAAIsB,EAAQrC,KAAKY,UAAUS,IAAIX,GAC3B2B,GACFA,EAAMR,KAAK,OACX7B,KAAKY,UAAUD,IAAID,EAAa2B,GAChCrC,KAAKsC,cAAc5B,KAEnBV,KAAKY,UAAUD,IAAID,EAAa,CAAC,SACjCV,KAAKY,UAAU2B,cAAcV,KAAKnB,GAEtC,CAGA,aAAA4B,CAAc5B,GACZ,IAAI2B,EAAQrC,KAAKY,UAAUS,IAAIX,GACd2B,EAAMG,MAAMC,GAAkB,QAATA,KAEpCJ,EAAM,GAAGnC,MAEXwC,QAAQC,IAAIN,EAAM,GACpB,CAGAE,cAAgB,ID3HZK,GADU,IAAIhD,EAAK,UAAW,GACpB,IAAIA,EAAK,UAAW,IAC9BiD,EAAY,IAAIjD,EAAK,YAAa,GAOxCQ,EAAMkB,UAAUsB,EAAQ9C,KAAM,CAAC,EAAG,GAAI8C,EAAQ7C,OAAQ,cAGtDK,EAAMkB,UAAUuB,EAAW,CAAC,EAAG,GAAIA,EAAU9C,OAAQ,YACrDK,EAAMgC,cAAc,CAAC,EAAG,IACxBhC,EAAMgC,cAAc,CAAC,EAAG,IAGxBM,QAAQC,IAAIvC,EAAMQ,U","sources":["webpack://battleship/./src/ships.js","webpack://battleship/./src/index.js","webpack://battleship/./src/gameboard.mjs"],"sourcesContent":["export class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n  }\n  damageTaken = 0;\n\n  hit() {\n    this.damageTaken++;\n  }\n\n  isSunk() {\n    if (this.damageTaken >= this.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Gameboard } from './gameboard.mjs';\nimport { Ship } from './ships';\n\nconst board = new Gameboard();\nconst cruiser = new Ship('Cruiser', 3);\nconst carrier = new Ship('Carrier', 5);\nconst destroyer = new Ship('Destroyer', 2);\n\n// console.log(\n//   // board.placeShip(cruiser.name, [2, 1], cruiser.length, 'horizontal')\n// );\n\n// console.log(\nboard.placeShip(carrier.name, [2, 2], carrier.length, 'horizontal');\n// );\n\nboard.placeShip(destroyer, [0, 3], destroyer.length, 'vertical');\nboard.receiveAttack([0, 3]);\nboard.receiveAttack([1, 3]);\n// board.receiveAttack([2, 3]);\n\nconsole.log(board.gameBoard);\n","export class Gameboard {\n  // Method to initialize game board//\n  createBoard() {\n    const rows = new Map();\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        const coordinates = `${i},${j}`;\n\n        rows.set(coordinates, null);\n      }\n    }\n\n    return rows;\n  }\n  //Gameboard//\n  gameBoard = this.createBoard();\n  //Method to check if coordinates is in bound//\n  isInbound([x, y]) {\n    if (x >= 0 && x <= 9 && y >= 0 && y <= 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  //Method to check if all coordinates are inbound before placing ships//\n  isAllCoordsInbound(arr) {\n    return arr.every((coord) => {\n      const [x, y] = coord;\n      return this.isInbound([x, y]);\n    });\n  }\n\n  //Method to check if all coordinates are empty before placing ships//\n  isAllCoordsEmpty(arr) {\n    return arr.every((coord) => {\n      return !this.gameBoard.get(coord);\n    });\n  }\n  //Method to place ships on board//\n  placeShip(shipType, [x, y], length, direction) {\n    let xValue = x;\n    let yValue = y;\n    if (this.isInbound([x, y])) {\n      const placementArr = [];\n      let placementToIntegerArr;\n      let coordinates;\n      for (let i = 0; i < length; i++) {\n        if (direction === 'horizontal') {\n          coordinates = `${x},${yValue}`;\n          yValue++;\n        } else if (direction === 'vertical') {\n          coordinates = `${xValue},${y}`;\n          xValue++;\n        }\n        placementArr.push(coordinates);\n        placementToIntegerArr = placementArr.map((coord) => {\n          return coord.split(',').map(Number);\n        });\n      }\n      const allCoordsInbound = this.isAllCoordsInbound(placementToIntegerArr);\n      const allCoordsEmpty = this.isAllCoordsEmpty(placementArr);\n      if (allCoordsInbound && allCoordsEmpty) {\n        placementArr.forEach((coord) => {\n          this.gameBoard.set(coord, [shipType]);\n        });\n      }\n      //Placing ships horizontally//\n      // if (direction === 'horizontal') {\n      //   const placementArr = [];\n      //   let placementToIntegerArr;\n      //   for (let i = 0; i < length; i++) {\n      //     const coordinates = `${x},${yValue}`;\n      //     yValue++;\n      //     placementArr.push(coordinates);\n      //     placementToIntegerArr = placementArr.map((coord) => {\n      //       return coord.split(',').map(Number);\n      //     });\n      //   }\n      //   const allHorizCoordsInbound = this.isAllCoordsInbound(\n      //     placementToIntegerArr\n      //   );\n      //   const allHorizCoordsEmpty = this.isAllCoordsEmpty(placementArr);\n      //   if (allHorizCoordsEmpty && allHorizCoordsInbound) {\n      //     placementArr.forEach((coord) => {\n      //       this.gameBoard.set(coord, [shipType]);\n      //     });\n      //   }\n\n      //   //Placing ships vertically//\n      // } else if (direction === 'vertical') {\n      //   const placementArr = [];\n      //   let placementToIntArr;\n      //   for (let i = 0; i < length; i++) {\n      //     const coordinates = `${xValue},${y}`;\n      //     xValue++;\n      //     placementArr.push(coordinates);\n      //     placementToIntArr = placementArr.map((coord) => {\n      //       return coord.split(',').map(Number);\n      //     });\n      //   }\n    }\n  }\n\n  //Method to take attacks//\n  receiveAttack([x, y]) {\n    const coordinates = `${x},${y}`;\n    let value = this.gameBoard.get(coordinates);\n    if (value) {\n      value.push('Hit');\n      this.gameBoard.set(coordinates, value);\n      this.sendHitToShip(coordinates);\n    } else {\n      this.gameBoard.set(coordinates, ['Miss']);\n      this.gameBoard.missedAttacks.push(coordinates);\n    }\n  }\n\n  //Method to send hit function to ship//\n  sendHitToShip(coordinates) {\n    let value = this.gameBoard.get(coordinates);\n    const hitShips = value.find((item) => item === 'Hit');\n    if (hitShips) {\n      value[0].hit();\n    }\n    console.log(value[0]);\n  }\n\n  //Keeping track of missed attacks//\n  missedAttacks = [];\n}\n"],"names":["Ship","constructor","name","length","this","damageTaken","hit","isSunk","board","createBoard","rows","Map","i","j","coordinates","set","gameBoard","isInbound","x","y","isAllCoordsInbound","arr","every","coord","isAllCoordsEmpty","get","placeShip","shipType","direction","xValue","yValue","placementArr","placementToIntegerArr","push","map","split","Number","allCoordsInbound","allCoordsEmpty","forEach","receiveAttack","value","sendHitToShip","missedAttacks","find","item","console","log","carrier","destroyer"],"sourceRoot":""}