{"version":3,"file":"app.bundle.js","mappings":"mBAAO,MAAMA,EACX,WAAAC,CAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,OAASA,CAChB,CACAE,YAAc,EAEd,GAAAC,GACEF,KAAKC,aACP,CAEA,MAAAE,GACE,OAAIH,KAAKC,aAAeD,KAAKD,MAK/B,ECdF,MAAMK,EAAQ,ICHP,MAEL,WAAAC,GACE,MAAMC,EAAO,IAAIC,IACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAc,GAAGF,KAAKC,IAE5BH,EAAKK,IAAID,EAAa,KACxB,CAGF,OAAOJ,CACT,CAEAM,UAAYZ,KAAKK,cAEjB,SAAAQ,EAAWC,EAAGC,IACZ,OAAID,GAAK,GAAKA,GAAK,GAAKC,GAAK,GAAKA,GAAK,CAKzC,CAEA,SAAAC,CAAUC,GAAWH,EAAGC,GAAIhB,EAAQmB,GAClC,IAAIC,EAASL,EACTM,EAASL,EACb,GAAIf,KAAKa,UAAU,CAACC,EAAGC,IACrB,GAAkB,eAAdG,EACF,IAAK,IAAIV,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC/B,MAAME,EAAc,GAAGI,KAAKM,IACvBpB,KAAKY,UAAUS,IAAIX,KACtBV,KAAKY,UAAUD,IAAID,EAAaO,GAChCG,IAEJ,MAEK,GAAkB,aAAdF,EACT,IAAK,IAAIV,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC/B,MAAME,EAAc,GAAGS,KAAUJ,IAC5Bf,KAAKY,UAAUS,IAAIX,KACtBV,KAAKY,UAAUD,IAAID,EAAaO,GAChCE,IAEJ,CAsBN,GD/DIG,EAAU,IAAI1B,EAAK,UAAW,GAC9B2B,EAAU,IAAI3B,EAAK,UAAW,GAC9B4B,EAAY,IAAI5B,EAAK,YAAa,GAExC6B,QAAQC,IACNtB,EAAMY,UAAUM,EAAQxB,KAAM,CAAC,EAAG,GAAIwB,EAAQvB,OAAQ,eAGxD0B,QAAQC,IACNtB,EAAMY,UAAUO,EAAQzB,KAAM,CAAC,EAAG,GAAIyB,EAAQxB,OAAQ,eAGxDK,EAAMY,UAAUQ,EAAU1B,KAAM,CAAC,EAAG,GAAI0B,EAAUzB,OAAQ,YAE1D0B,QAAQC,IAAItB,EAAMQ,U","sources":["webpack://battleship/./src/ships.js","webpack://battleship/./src/index.js","webpack://battleship/./src/gameboard.mjs"],"sourcesContent":["export class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n  }\n  damageTaken = 0;\n\n  hit() {\n    this.damageTaken++;\n  }\n\n  isSunk() {\n    if (this.damageTaken >= this.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Gameboard } from './gameboard.mjs';\nimport { Ship } from './ships';\n\nconst board = new Gameboard();\nconst cruiser = new Ship('Cruiser', 3);\nconst carrier = new Ship('Carrier', 5);\nconst destroyer = new Ship('Destroyer', 2);\n\nconsole.log(\n  board.placeShip(cruiser.name, [2, 1], cruiser.length, 'horizontal')\n);\n\nconsole.log(\n  board.placeShip(carrier.name, [5, 5], carrier.length, 'horizontal')\n);\n\nboard.placeShip(destroyer.name, [9, 9], destroyer.length, 'vertical');\n\nconsole.log(board.gameBoard);\n","export class Gameboard {\n  // Method to initialize game board//\n  createBoard() {\n    const rows = new Map();\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        const coordinates = `${i},${j}`;\n\n        rows.set(coordinates, null);\n      }\n    }\n\n    return rows;\n  }\n  //Gameboard//\n  gameBoard = this.createBoard();\n  //Method to check if coordinates is in bound//\n  isInbound([x, y]) {\n    if (x >= 0 && x <= 9 && y >= 0 && y <= 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  //Method to place ships on board//\n  placeShip(shipType, [x, y], length, direction) {\n    let xValue = x;\n    let yValue = y;\n    if (this.isInbound([x, y])) {\n      if (direction === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n          const coordinates = `${x},${yValue}`;\n          if (!this.gameBoard.get(coordinates)) {\n            this.gameBoard.set(coordinates, shipType);\n            yValue++;\n          }\n        }\n        //Placing ships vertically//\n      } else if (direction === 'vertical') {\n        for (let i = 0; i < length; i++) {\n          const coordinates = `${xValue},${y}`;\n          if (!this.gameBoard.get(coordinates)) {\n            this.gameBoard.set(coordinates, shipType);\n            xValue++;\n          }\n        }\n      }\n    }\n    //Placing ships horizontally//\n    // if (direction === 'horizontal') {\n    //   for (let i = 0; i < length; i++) {\n    //     const coordinates = `${x},${yValue}`;\n    //     if (!this.gameBoard.get(coordinates)) {\n    //       this.gameBoard.set(coordinates, shipType);\n    //       yValue++;\n    //     }\n    //   }\n    //   //Placing ships vertically//\n    // } else if (direction === 'vertical') {\n    //   for (let i = 0; i < length; i++) {\n    //     const coordinates = `${xValue},${y}`;\n    //     if (!this.gameBoard.get(coordinates)) {\n    //       this.gameBoard.set(coordinates, shipType);\n    //       xValue++;\n    //     }\n    //   }\n    // }\n  }\n}\n"],"names":["Ship","constructor","name","length","this","damageTaken","hit","isSunk","board","createBoard","rows","Map","i","j","coordinates","set","gameBoard","isInbound","x","y","placeShip","shipType","direction","xValue","yValue","get","cruiser","carrier","destroyer","console","log"],"sourceRoot":""}